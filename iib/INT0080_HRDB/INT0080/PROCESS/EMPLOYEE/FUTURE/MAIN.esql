BROKER SCHEMA INT0080.PROCESS.EMPLOYEE.FUTURE
-- $MQSI_VERSION=$Id$MQSI$
-- $MQSI ESQL=$URL$MQSI$

-- Working tables
DECLARE TBL_EMPLOYMENT_FUTURE	CONSTANT CHARACTER 'EmpEmploymentFuture'; 
DECLARE TBL_EMPLOYMENT			CONSTANT CHARACTER 'EmpEmployment'; 

CREATE COMPUTE MODULE ProcessEmployeeFuture
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.d.results.Item;
		DECLARE syncTime TIMESTAMP CAST(InputRoot.MQRFH2.usr.syncTime AS TIMESTAMP);
		
		IF (CARDINALITY(InputRoot.JSON.Data.d.results.Item[]) > 0) THEN
			CALL MapPerPersonFuture(inRef, syncTime);
			SET OutputRoot.XMLNSC.Employee.Info = 'Employees sucessfully processed.';	
		ELSE
			SET OutputRoot.XMLNSC.Employee.Info = 'No data found in input message.';			
			SET OutputLocalEnvironment.MetaData.Status = 'Filtered';
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE MapPerPersonFuture(IN inRef REFERENCE, IN syncTime TIMESTAMP) BEGIN

		DECLARE i INT 1;
		
		WHILE LASTMOVE(inRef) DO
			DECLARE vFilter BOOLEAN FALSE;
			DECLARE vIgnore BOOLEAN FALSE;
			DECLARE vEmpAr INT 1;
			DECLARE globAssign BOOLEAN FALSE;
			DECLARE workerType CHAR;
			DECLARE employmentType CHAR;						

			-- Incase of error then easier to identify which row that was in error
			SET Environment.personIdExternal = inRef.personIdExternal;
			SET Environment.initials = inRef.customString10;
		
			-- Get correct employmentNav array		
			CALL GetEmploymentNav(inRef, vEmpAr, globAssign, vIgnore, vFilter);			
			
			IF (vFilter = FALSE) THEN			
				
				-- Validate others
				CALL ValidateAndLog(inRef, vEmpAr, vIgnore);
													
				-- Get SF Worker Type for Non Employees	
				IF (inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.employeeClassNav.externalCode = '9') THEN
					SET workerType = inRef.employmentNav.results.Item[vEmpAr].workOrderNav.results.Item.workerType;				  				  				
				END IF;	
				
				-- Process Employment	
				CALL ProcessEmploymentFuture(inRef,
								   	   		 vEmpAr,
								       		 workerType,
								       		 globAssign,
								       		 vIgnore,
								       		 syncTime);		
				
			END IF;	
							
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;	
		END WHILE;	
	END;
		
	CREATE PROCEDURE GetEmploymentNav(IN inRef REFERENCE, 
									  INOUT vEmpAr INT, 
									  INOUT globAssign BOOLEAN, 
									  INOUT vIgnore BOOLEAN,
									  INOUT vFilter BOOLEAN) BEGIN
		DECLARE nbrEmpNav INT;
		DECLARE tmpStartDate TIMESTAMP;
		DECLARE vStartDate TIMESTAMP;
		DECLARE vEndDate TIMESTAMP;
		DECLARE vDateRange CHAR '';
		DECLARE todayDate TIMESTAMP;
		DECLARE vtodayDate CHAR;	
		DECLARE i INT 1;
		
		-- Get current employee in table EmpEmployment
		CALL GetCurrentEmpInEmployment(inRef.personIdExternal);	
			
		SET vtodayDate 	= CAST(CURRENT_DATE AS CHAR FORMAT 'yyyy-MM-dd') || ' 00:00:00';	
		SET nbrEmpNav 	= CARDINALITY(inRef.employmentNav.results.Item[]);

		IF (nbrEmpNav = 0) THEN
			SET vIgnore = TRUE;
		END IF;

		-- Get active employmentNav
		IF (nbrEmpNav > 1) THEN		
			DECLARE nullEndDate BOOLEAN FALSE;
			
			SET tmpStartDate = CAST('1970-01-01 00:00:00' AS TIMESTAMP FORMAT 'yyyy-MM-dd HH:mm:ss');
			
			WHILE(nbrEmpNav >= i) DO

				SET vStartDate 	= INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[i].startDate);
				SET vEndDate 	= INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[i].endDate);
				SET vDateRange 	= vDateRange || '->startDate[' || CAST(i-1 AS CHAR) || ']:' || COALESCE(CAST(vStartDate AS CHAR FORMAT 'yyyy-MM-dd HH:mm:ss'), 'null');
				SET vDateRange 	= vDateRange || '->endDate[' || CAST(i-1 AS CHAR) || ']:' || COALESCE(CAST(vEndDate AS CHAR FORMAT 'yyyy-MM-dd HH:mm:ss'), 'null');

				IF (globAssign = FALSE) THEN			
														
					-- If employmentNav/endDate is null, then we assume this is the active record, even if another employmentNav/startDate is newer
					IF (vEndDate IS NULL) THEN
						SET nullEndDate = TRUE;
						SET vEmpAr = i;
					END IF;							
					
					-- employmentNav/startDate must be > than set start date(1970-01-01 00:00:00) or previous employmentNav/startDate
					IF ((vStartDate > tmpStartDate) AND nullEndDate = FALSE) THEN
						SET tmpStartDate = vStartDate;																
						SET vEmpAr = i;
					END IF;

					-- Check if any Global Assignment exist and is active, if active, then it is this employmentNav to use and all others can be ignored
					IF (inRef.employmentNav.results.Item[i].empGlobalAssignmentNav.userId IS NOT NULL) THEN					
						IF (inRef.employmentNav.results.Item[i].jobInfoNav.results.Item.emplStatusNav.externalCode = 'A') THEN -- If jobInfo is active, then assume Global Assignment is active							
							SET globAssign 	= TRUE;
							SET vEmpAr 	= i;      	  	     			  							
						END IF;
					END IF;		
				END IF;					
				
				SET i = i +1;	
			END WHILE;				
			
			-- Filter out employees that is not new hires or do not have have employmentStatus 'Terminated' in table EmpEmployment
			IF (Environment.tmp.Employment.employmentStatus <> 'Terminated') THEN
				SET vFilter = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Filter',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'EmpEmployment',
												   'Current employee in table EmpEmployment has employmentStatus: ' || Environment.tmp.Employment.employmentStatus || '. We only fetch new future hires (employees that does not exist in HRDB) or future rehires (employmentStatus = ''Terminated'' in table EmpEmployment)');							
			ELSE		
				IF (globAssign = TRUE) THEN -- Global Assignment is active - Allowed - log as info
					CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
													   'Info',
													   'PerPerson',
													   'personIdExternal',
													   inRef.personIdExternal,
													   'employmentNav',
													   'Global Assignment is active->Total employmentNav found:' || CAST(CARDINALITY(inRef.employmentNav.results.Item[]) AS CHAR) 
													   || '->Used employmentNav array ' || CAST(vEmpAr -1 AS CHAR) || '->Date ranges' || vDateRange);				
				ELSE -- If several employmentNav - Allowed - log as info
					CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
													   'Info',
													   'PerPerson',
													   'personIdExternal',
													   inRef.personIdExternal,
													   'employmentNav',
													   'Total employmentNav found:' || CAST(CARDINALITY(inRef.employmentNav.results.Item[]) AS CHAR) 
													   || '->Used employmentNav array ' || CAST(vEmpAr -1 AS CHAR) || '->Date ranges' || vDateRange);
				END IF;
			END IF;
		ELSE
					
			-- Filter out employees that is not new hires or do not have have employmentStatus 'Terminated' in table EmpEmployment
			IF (Environment.tmp.Employment.employmentStatus <> 'Terminated') THEN
				SET vFilter = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Filter',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'EmpEmployment',
												   'Current employee in table EmpEmployment has employmentStatus: ' || Environment.tmp.Employment.employmentStatus || '. We only fetch new future hires (employees that does not exist in HRDB) or future rehires (employmentStatus = ''Terminated'' in table EmpEmployment)');	
									  		
			END IF;		
		END IF;	
	END;

	CREATE PROCEDURE ValidateAndLog(IN inRef REFERENCE, INOUT vEmpAr INT, INOUT vIgnore BOOLEAN) BEGIN
		
		-- Check if there are no jobInfoNav - Not allowed - Ignore and log			
		IF (CARDINALITY(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item[]) = 0) THEN
			SET vIgnore = TRUE;
			CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
											   'Ignore',
											   'PerPerson',
											   'personIdExternal',
											   inRef.personIdExternal,
											   'jobInfoNav',
											   'Missing object jobInfoNav->employmentNav/startDate:' || CAST(INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].startDate) AS CHAR FORMAT 'yyyy-MM-dd HH:mm:ss'));			
		END IF;										
		
		-- Check if several jobInfoNav - Not allowed - Ignore and log
		IF (vIgnore = FALSE) THEN
			IF (CARDINALITY(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item[]) > 1) THEN
				SET vIgnore = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Ignore',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'jobInfoNav',
												   'Several objects of jobInfoNav' || ' Total: ' || CAST(CARDINALITY(inRef.employmentNav.results.Item[1].jobInfoNav.results.Item[]) AS CHAR));			
			END IF;
		END IF;

		-- Check if several personalInfoNav - Not allowed - Ignore and log		
		IF (vIgnore = FALSE) THEN
			IF (CARDINALITY(inRef.personalInfoNav[1].results.Item[]) > 1) THEN
				SET vIgnore = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Ignore',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'personalInfoNav',
												   'Several objects of personalInfoNav' || ' Total: ' || CAST(CARDINALITY(inRef.employmentNav.results.Item[1].jobInfoNav.results.Item[]) AS CHAR));						
			END IF;							
		END IF;

		-- Check if there are no personalInfoNav - Not allowed - Ignore and log		
		IF (vIgnore = FALSE) THEN	
			IF (CARDINALITY(inRef.personalInfoNav.results.Item[]) = 0) THEN
				SET vIgnore = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Ignore',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'personalInfoNav',
												   'Missing object personalInfoNav');			
			END IF;								
		END IF;	

		-- Check if initials not exist - Not allowed - Ignore and log		
		IF (vIgnore = FALSE) THEN		
			IF (inRef.customString10 IS NULL OR inRef.customString10 = '') THEN
				SET vIgnore = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Ignore',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'PerPerson',
												   'Missing Initials->customString10');					
			END IF;	
		END IF;
				
		-- Check if userid not exists - Not allowed - Ignore and log
		IF (vIgnore = FALSE) THEN			
			IF (inRef.employmentNav.results.Item[vEmpAr].userId IS NULL OR inRef.employmentNav.results.Item[vEmpAr].userId = '') THEN
				SET vIgnore = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('FutureEmployee',
												   'Ignore',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'employmentNav',
												   'Missing userId');
			END IF;
		END IF;
		
	END;

	CREATE FUNCTION GetOrgunitId(IN department CHAR,
								 IN division CHAR,
								 IN businessUnit CHAR
	) RETURNS CHAR BEGIN			 		
					
		DECLARE orgUnitId CHAR;
		
		SET orgUnitId = COALESCE(department, NULL);
					
		IF (orgUnitId IS NULL) THEN
			SET orgUnitId = COALESCE(division, NULL);
		END IF;
				
		IF (orgUnitId IS NULL) THEN
			SET orgUnitId = COALESCE(businessUnit, NULL);
		END IF;
			  	
	   	RETURN orgUnitId;
	END;
			
	CREATE PROCEDURE GetSeniorityDate(IN globAssign BOOLEAN,
									  IN inRef REFERENCE,
									  IN vEmpAr INT,
									  INOUT seniorityDate TIMESTAMP) BEGIN
	
		IF (globAssign = TRUE) THEN				
			-- Get seniority date from the employmentNav which is the active and do not contain Global Assignment
			SET seniorityDate = INT0080.COMMON.GetSFTimeStamp(THE (SELECT ITEM fieldvalue(r.seniorityDate)
					   		  	  	     	   				  	   FROM inRef.employmentNav.results.Item[] AS r
						      	  	     	   				  	   WHERE r.endDate IS NULL
						      	  	     	   				  	   AND r.empGlobalAssignmentNav.userId IS NULL));				
		ELSE	
			SET seniorityDate = INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].seniorityDate);			
			
			IF (inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.employeeClassNav.externalCode = '9') THEN
				SET seniorityDate = INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].startDate);
			END IF;													
		END IF;	
	END;

	CREATE PROCEDURE GetLastWorkingDay(IN inRef REFERENCE,
									   IN vEmpAr INT,
									   INOUT lastWorkingDay TIMESTAMP,
									   INOUT vIgnore BOOLEAN) BEGIN
		
		DECLARE ldw TIMESTAMP;
		DECLARE termDate TIMESTAMP;
		DECLARE startEmpDate TIMESTAMP;
		DECLARE endJobDate TIMESTAMP;
		DECLARE todayDate TIMESTAMP;
		DECLARE vtodayDate CHAR;
		
		SET vtodayDate 	= CAST(CURRENT_DATE AS CHAR FORMAT 'yyyy-MM-dd') || ' 00:00:00.000';
		SET todayDate 	= CAST(vtodayDate AS TIMESTAMP FORMAT 'yyyy-MM-dd HH:mm:ss.SSS');
		
		SET ldw = INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].lastDateWorked);
		SET termDate = INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].endDate);
	
		-- Active employee
		IF (inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.emplStatusNav.externalCode <> 'T') THEN 
			
			-- External employee
			IF (inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.employeeClassNav.externalCode = '9') THEN								
				IF (todayDate = termDate) THEN
					SET lastWorkingDay = termDate;
				END IF;
			ELSE
				-- Permanent/Temporary employee
				IF (todayDate = ldw OR (ldw < todayDate AND termDate >= todayDate)) THEN
					SET lastWorkingDay = ldw;
				END IF;	
			END IF;			
		
		-- Terminated employee
		ELSEIF (inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.emplStatusNav.externalCode = 'T') THEN		
			IF (inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.employeeClassNav.externalCode = '9') THEN
				SET lastWorkingDay = termDate;								
			ELSE
				SET lastWorkingDay = ldw;
			END IF;
			
			-- If last worked date still is null for a terminated employee, then someything is wrong so log and ignore it
			IF (lastWorkingDay IS NULL) THEN 
				SET vIgnore = TRUE;
				CALL INT0080.COMMON.InsertSynchLog('Employee',
												   'Ignore',
												   'PerPerson',
												   'personIdExternal',
												   inRef.personIdExternal,
												   'LastWorkingDay',
												   'Last working day is missing for terminated employee (potentially a rehire)');	
			END IF;		
								
		END IF;						
	END;							

	CREATE FUNCTION GetIsManager(IN teamMembersSize INT
	) RETURNS BOOLEAN BEGIN			 		
								
		IF (teamMembersSize > 0) THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;


	CREATE PROCEDURE ProcessEmploymentFuture(IN inRef REFERENCE,
								   	   		 IN vEmpAr INT,
								   	   		 IN workerType CHAR,
								   	   		 IN globAssign BOOLEAN,
								   	   		 IN vIgnore BOOLEAN,
								   	   		 IN syncTime TIMESTAMP) BEGIN
		
		DECLARE userId					CHAR;
		DECLARE personIdExternal		CHAR;
		DECLARE initials 				CHAR;
		DECLARE firstName 				CHAR;		
		DECLARE lastName 				CHAR;
		DECLARE companyCode				CHAR;
		DECLARE locationId				CHAR;		
		DECLARE orgUnitId			 	CHAR;
		DECLARE department			 	CHAR;
		DECLARE division			 	CHAR;
		DECLARE payGrade				CHAR;
		DECLARE jobLevel				CHAR;
		DECLARE businessUnit			CHAR;
		DECLARE costCenterId			CHAR;
		DECLARE positionId 				CHAR;
		DECLARE positionName			CHAR;
		DECLARE employeeClass 			CHAR;
		DECLARE employeeSubClass 		CHAR;
		DECLARE employeeType			CHAR;
		DECLARE employmentType			CHAR;
		DECLARE standardHours			FLOAT;
		DECLARE workingDaysPerWeek		FLOAT;
		DECLARE fullTimeEquivalent		FLOAT;
		DECLARE employmentStatus		CHAR;
		DECLARE seniorityDate			TIMESTAMP;
		DECLARE originalStartDate		TIMESTAMP;
		DECLARE recruitDate		 		TIMESTAMP;
		DECLARE positionEntryDate 		TIMESTAMP;
		DECLARE dateOfContractTerm		TIMESTAMP;
		DECLARE lastDateWorked			TIMESTAMP;
		DECLARE event					CHAR;
		DECLARE eventReason				CHAR;
		DECLARE eventDate				TIMESTAMP;
		DECLARE isManager				BOOLEAN;
		DECLARE businessEmail			CHAR;
		DECLARE businessMobCtryCode		CHAR;
		DECLARE businessMobPhoneNbr		CHAR;
		DECLARE businessLandCtryCode	CHAR;
		DECLARE businessLandPhoneNbr	CHAR;
		DECLARE buildingNumber			CHAR;	
		DECLARE roomNumber				CHAR;
		DECLARE managerUserId			CHAR;	
		DECLARE datbaseAction			CHAR;		
		DECLARE orgUnitLevel1 			CHAR;
		DECLARE orgUnitLevel2 			CHAR;
		DECLARE orgUnitLevel3 			CHAR;				
		DECLARE orgUnitLevel4 			CHAR;		
		DECLARE orgUnitLevel5 			CHAR;				
		DECLARE orgUnitLevel6 			CHAR;
		DECLARE contWrkAdmPositionId 	CHAR;
		DECLARE parentPositionId	 	CHAR;						

		DECLARE vtodayDate CHAR;
		DECLARE todayDate TIMESTAMP;

		SET vtodayDate 	= CAST(CURRENT_DATE AS CHAR FORMAT 'yyyy-MM-dd') || ' 00:00:00';
		SET todayDate 	= CAST(vtodayDate AS TIMESTAMP FORMAT 'yyyy-MM-dd HH:mm:ss');		


		SET personIdExternal = TRIM(LEFT(inRef.personIdExternal, 32));
	
		-- Get LastWorkingDay
		IF (vIgnore = FALSE) THEN
			CALL GetLastWorkingDay(inRef, vEmpAr, lastDateWorked, vIgnore);
		END IF;
		
		IF (vIgnore = FALSE) THEN
			SET userId 					= inRef.employmentNav.results.Item[vEmpAr].userId;	
			SET initials 				= TRIM(LEFT(inRef.customString10, 128));
			SET firstName				= TRIM(LEFT(inRef.personalInfoNav.results.Item.displayName, 128));
			SET lastName				= TRIM(LEFT(inRef.personalInfoNav.results.Item.lastName, 128));			
			SET companyCode				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.company, 8));
			SET locationId 				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.locationNav.externalCode, 128));	
			SET department 				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.department, 32));
			SET division				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.division, 32));
			SET payGrade				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.payGradeNav.name, 64));
			SET jobLevel				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_jobLevel, 64));
			SET businessUnit			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.businessUnit, 32));	
			SET orgUnitId 				= TRIM(LEFT(GetOrgunitId(department, division, businessUnit), 32));			
			SET costCenterId 			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.costCenter, 32));
	      	SET standardHours 			= CAST(TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.standardHours, 10)) AS FLOAT);
	      	SET workingDaysPerWeek 		= CAST(TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.workingDaysPerWeek, 10)) AS FLOAT);
	      	SET fullTimeEquivalent 		= CAST(TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.fte, 10)) AS FLOAT);
			SET isManager				= GetIsManager(inRef.employmentNav.results.Item[vEmpAr].userNav.teamMembersSize);
			SET recruitDate				= INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].startDate);
			SET originalStartDate		= INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].originalStartDate);
			SET eventReason				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.eventReasonNav.name , 100));
		    SET eventDate				= INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.startDate);
			SET buildingNumber			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].userNav.custom01, 255));
			SET roomNumber				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].userNav.custom02, 255));
			SET managerUserId			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.managerUserNav.userId, 100));	
				
			-- Get employeeClass
			SET employeeClass = TRIM(LEFT(COALESCE(THE (SELECT ITEM fieldvalue(r.label)
   		  	  	        	  		          	   		FROM inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.employeeClassNav.picklistLabels.results.Item[] AS r
	      	  	        	  		          	   		WHERE r.locale = 'en_US'), NULL), 255));			
						
			-- Get employeeSubClass
			SET employeeSubClass = TRIM(LEFT(COALESCE(inRef.employmentNav.results.Item[vEmpAr].workOrderNav.results.Item.workerTypeNav.label_defaultValue, NULL), 255));
	      	  	        	  		          
	        IF (employeeSubClass IS NULL) THEN
	        	SET employeeSubClass = employeeClass;
	        END IF;
	        
	        SET employeeType			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.customString4Nav.externalName, 255));	          
	      	  	        	  		          	
			-- Get employmentType
			SET employmentType = TRIM(LEFT(COALESCE(THE (SELECT ITEM fieldvalue(r.label)
	   		  	  	        	  		  	  			 FROM inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.employmentTypeNav.picklistLabels.results.Item[] AS r
		      	  	        	  		  	  			 WHERE r.locale = 'en_US'), NULL), 255));	

	      	 
			-- Get employmentStatus
			SET employmentStatus = TRIM(LEFT(COALESCE(THE (SELECT ITEM fieldvalue(r.label)
	   		  	  	        	  		  	  		  	   FROM inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.emplStatusNav.picklistLabels.results.Item[] AS r
		      	  	        	  		  	  		  	   WHERE r.locale = 'en_US'), NULL), 255));		




			-- For some terminated employees the position related info disappears (position probably reused).
			If (employmentStatus = 'Terminated' ) THEN

				-- Don't use oData from PP/SF but use HRDB itself to populate these fields by looking up the best suitable old record for this employee.  
				--   A dummy field "recordpriority" is created in the SELECT to prioritize: 
				   -- (3) Non-terminated (Active) records which have a positionId
				   -- (2) If above not found: records that have positionId
				   -- (1) If above not found: rest of the records (typically employees terminated at initial load)
				-- Using "ORDER BY xx DESC" to find the newest record ( top-1) with the heightest priority.     
				
				SET Environment.Variables.lastOrgUnitLevels[] = 
					PASSTHRU('SELECT TOP(1) TE.positionId, TE.positionName, TE.positionEntryDate,
							TE.orgUnitLevel1, TE.orgUnitLevel2, TE.orgUnitLevel3, TE.orgUnitLevel4, TE.orgUnitLevel5, TE.orgUnitLevel6,
							 TE.parentPositionId, TE.contingentWorkerAdminPositionId, 
							 CASE 
							 	WHEN TE.employmentStatus != ''Terminated'' and TE.positionId is not null THEN 3
							 	WHEN TE.positionId is not null THEN 2
							 	ELSE 1
							 END as recordpriority
						FROM ' || TBL_EMPLOYMENT_FUTURE || ' AS TE
						WHERE TE.personIdExternal = ?   
					 	ORDER BY recordpriority DESC, recordFromDate DESC ' TO Database.HRDB VALUES (personIdExternal) ); 				

				SET positionId 				= Environment.Variables.lastOrgUnitLevels.positionId;
				SET positionName 			= Environment.Variables.lastOrgUnitLevels.positionName;
				SET positionEntryDate		= Environment.Variables.lastOrgUnitLevels.positionEntryDate;
				SET orgUnitLevel1			= Environment.Variables.lastOrgUnitLevels.orgUnitLevel1;
				SET orgUnitLevel2			= Environment.Variables.lastOrgUnitLevels.orgUnitLevel2;
				SET orgUnitLevel3			= Environment.Variables.lastOrgUnitLevels.orgUnitLevel3;
				SET orgUnitLevel4			= Environment.Variables.lastOrgUnitLevels.orgUnitLevel4;
				SET orgUnitLevel5			= Environment.Variables.lastOrgUnitLevels.orgUnitLevel5;
				SET orgUnitLevel6			= Environment.Variables.lastOrgUnitLevels.orgUnitLevel6;
				SET parentPositionId		= Environment.Variables.lastOrgUnitLevels.parentPositionId;
				SET contWrkAdmPositionId 	= Environment.Variables.lastOrgUnitLevels.contingentWorkerAdminPositionId;
			
			ELSE 		
				-- Proceed like "normal" getting values from oData query result	

				SET positionId 				= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.position, 128));
				SET positionName 			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.externalName_defaultValue, 255));
				SET positionEntryDate		= INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionEntryDate);

				SET orgUnitLevel1			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_orgUnitLevel1, 128));
				SET orgUnitLevel2			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_orgUnitLevel2, 128));
				SET orgUnitLevel3			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_orgUnitLevel3, 128));
				SET orgUnitLevel4			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_orgUnitLevel4, 128));
				SET orgUnitLevel5			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_orgUnitLevel5, 128));
				SET orgUnitLevel6			= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.cust_orgUnitLevel6, 128));
				
				SET parentPositionId		= TRIM(LEFT(inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.parentPosition.code, 128));
	
				-- Get contingentWorkerAdminPositionId 
				SET contWrkAdmPositionId = TRIM(LEFT(THE (SELECT ITEM fieldvalue(r.relatedPosition)
					       	   		 		   	 	  FROM inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.positionNav.positionMatrixRelationship.results.Item[] AS r
				          	   		   		   	 	  WHERE r.matrixRelationshipType = 'custom manager'), 128));
				
			END IF; 

			-- Get seniorityDate
			CALL GetSeniorityDate(globAssign, inRef, vEmpAr, seniorityDate);	

			
			-- Get dateOfContractTerm
			IF (lastDateWorked IS NOT NULL) THEN
				SET dateOfContractTerm = INT0080.COMMON.GetSFTimeStamp(inRef.employmentNav.results.Item[vEmpAr].endDate);
			END IF;
			
			-- Get event
			SET event = TRIM(LEFT(THE (SELECT ITEM fieldvalue(r.label)
					   		  	  	   FROM inRef.employmentNav.results.Item[vEmpAr].jobInfoNav.results.Item.eventNav.picklistLabels.results.Item[] AS r
						      	 	   WHERE r.locale = 'en_US'), 255));
						      	 	   
			SET event = 'Future - ' || event;			      	 	   
						      	  
			-- Get businessEmail							          	   		 
			SET businessEmail = TRIM(LEFT(LOWER(THE (SELECT ITEM fieldvalue(r.emailAddress)
					   		  	  	     			 FROM inRef.emailNav.results.Item[] AS r
						      	  	     			 WHERE r.emailTypeNav.externalCode = 'B')), 100));
						      	  	     		
			-- Get businessMobileCountryCode
			SET businessMobCtryCode = TRIM(LEFT(THE (SELECT ITEM fieldvalue(r.countryCode)
				          	   		 		   		 FROM inRef.phoneNav.results.Item[] AS r
				          	   		   		   		 WHERE r.phoneTypeNav.externalCode = 'C'), 32));
				          	   		   
			-- Get businessMobilePhoneNumber
			SET businessMobPhoneNbr	= TRIM(LEFT(THE (SELECT ITEM fieldvalue(r.phoneNumber)
				          	   		 		   		 FROM inRef.phoneNav.results.Item[] AS r
				          	   		   		   		 WHERE r.phoneTypeNav.externalCode = 'C'), 100));
						          	   		   						      	  	     				
			-- Get businessLandlineCountryCode
			SET businessLandCtryCode = TRIM(LEFT(THE (SELECT ITEM fieldvalue(r.countryCode)
				          	   		 		   	 	  FROM inRef.phoneNav.results.Item[] AS r
				          	   		   		   	 	  WHERE r.phoneTypeNav.externalCode = 'B'), 32));
				          	   		   
			-- Get businessLandlinePhoneNumber
			SET businessLandPhoneNbr = TRIM(LEFT(THE (SELECT ITEM fieldvalue(r.phoneNumber)
				          	   		 		   		  FROM inRef.phoneNav.results.Item[] AS r
				          	   		   		   		  WHERE r.phoneTypeNav.externalCode = 'B'), 100));
	      	  	        	  		  					
			-- Get current employee in table EmploymentFuture
			CALL GetCurrentEmpInEmploymentFuture(personIdExternal);	
			
			-- Look for any differences on the record (and save which rule triggers mismatch for debugging purposes)
			DECLARE firstMismatch CHAR '';
				
			IF     (COALESCE(userId, '') <> COALESCE(Environment.tmp.EmploymentFuture.userId, '') ) THEN SET firstMismatch = 'userId'; 
			ELSEIF (COALESCE(initials, '') <> COALESCE(Environment.tmp.EmploymentFuture.initials, '') ) THEN SET firstMismatch = 'initials';
			ELSEIF (COALESCE(firstName, '') <> COALESCE(Environment.tmp.EmploymentFuture.firstName, '') ) THEN SET firstMismatch = 'firstName';
			ELSEIF (COALESCE(lastName, '') <> COALESCE(Environment.tmp.EmploymentFuture.lastName, '') ) THEN SET firstMismatch = 'lastName';
			ELSEIF (COALESCE(companyCode, '') <> COALESCE(Environment.tmp.EmploymentFuture.companyCode, '') ) THEN SET firstMismatch = 'companyCode';
			ELSEIF (COALESCE(locationId, '') <> COALESCE(Environment.tmp.EmploymentFuture.locationId, '') ) THEN SET firstMismatch = 'locationId';
			ELSEIF (COALESCE(orgUnitId, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitId, '') ) THEN SET firstMismatch = 'orgUnitId';
			ELSEIF (COALESCE(department, '') <> COALESCE(Environment.tmp.EmploymentFuture.department, '') ) THEN SET firstMismatch = 'department';
			ELSEIF (COALESCE(division, '') <> COALESCE(Environment.tmp.EmploymentFuture.division, '') ) THEN SET firstMismatch = 'division';
			ELSEIF (COALESCE(payGrade, '') <> COALESCE(Environment.tmp.EmploymentFuture.payGrade, '') ) THEN SET firstMismatch = 'payGrade';
			ELSEIF (COALESCE(jobLevel, '') <> COALESCE(Environment.tmp.EmploymentFuture.jobLevel, '') ) THEN SET firstMismatch = 'jobLevel';
			ELSEIF (COALESCE(businessUnit, '') <> COALESCE(Environment.tmp.EmploymentFuture.businessUnit, '') ) THEN SET firstMismatch = 'businessUnit';
			ELSEIF (COALESCE(positionId, '') <> COALESCE(Environment.tmp.EmploymentFuture.positionId, '') ) THEN SET firstMismatch = 'positionId';
			ELSEIF (COALESCE(costCenterId, '') <> COALESCE(Environment.tmp.EmploymentFuture.costCenterId, '') ) THEN SET firstMismatch = 'costCenterId';
			ELSEIF (COALESCE(employeeClass, '') <> COALESCE(Environment.tmp.EmploymentFuture.employeeClass, '') ) THEN SET firstMismatch = 'employeeClass';
			ELSEIF (COALESCE(employeeSubClass, '') <> COALESCE(Environment.tmp.EmploymentFuture.employeeSubClass, '') ) THEN SET firstMismatch = 'employeeSubClass';
			ELSEIF (COALESCE(employeeType, '') <> COALESCE(Environment.tmp.EmploymentFuture.employeeType, '') ) THEN SET firstMismatch = 'employeeType';
			ELSEIF (COALESCE(employmentType, '') <> COALESCE(Environment.tmp.EmploymentFuture.employmentType, '') ) THEN SET firstMismatch = 'employmentType';
			ELSEIF (COALESCE(employmentStatus, '') <> COALESCE(Environment.tmp.EmploymentFuture.employmentStatus, '') ) THEN SET firstMismatch = 'employmentStatus';
			ELSEIF (isManager <> Environment.tmp.EmploymentFuture.isManager ) THEN SET firstMismatch = 'isManager';
			ELSEIF (COALESCE(seniorityDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.seniorityDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'seniorityDate';
			ELSEIF (COALESCE(originalStartDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.originalStartDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'originalStartDate';
			ELSEIF (COALESCE(recruitDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.recruitDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'recruitDate';
			ELSEIF (COALESCE(positionEntryDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.positionEntryDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'positionEntryDate';
			ELSEIF (COALESCE(dateOfContractTerm, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.dateOfContractTermination, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'dateOfContractTermination';
			ELSEIF (COALESCE(lastDateWorked, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.lastDateWorked, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'lastDateWorked';
			ELSEIF (CAST(COALESCE(standardHours, 99999)  AS CHAR FORMAT '##0.00' ) <> CAST(COALESCE(Environment.tmp.EmploymentFuture.standardHours, 99999)  AS CHAR FORMAT '##0.00' ) ) THEN SET firstMismatch = 'standardHours';
			ELSEIF (CAST(COALESCE(workingDaysPerWeek, 99999)  AS CHAR FORMAT '##0.00' ) <>  CAST(COALESCE(Environment.tmp.EmploymentFuture.workingDaysPerWeek, 99999) AS CHAR FORMAT '##0.00' ) ) THEN SET firstMismatch = 'workingDaysPerWeek';
			ELSEIF (CAST(COALESCE(fullTimeEquivalent, 99999)  AS CHAR FORMAT '##0.00' ) <>  CAST(COALESCE(Environment.tmp.EmploymentFuture.fullTimeEquivalent, 99999) AS CHAR FORMAT '##0.00' ) ) THEN SET firstMismatch = 'fullTimeEquivalent';
			ELSEIF (COALESCE(event, '') <> COALESCE(Environment.tmp.EmploymentFuture.event, '') ) THEN SET firstMismatch = 'event';
			ELSEIF (COALESCE(eventReason, '') <> COALESCE(Environment.tmp.EmploymentFuture.eventReason, '') ) THEN SET firstMismatch = 'eventReason';
			ELSEIF (COALESCE(eventDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) <> COALESCE(Environment.tmp.EmploymentFuture.eventDate, CAST('19000101' AS DATE FORMAT 'yyyyMMdd')) ) THEN SET firstMismatch = 'eventDate';
			ELSEIF (COALESCE(businessEmail, '') <> COALESCE(Environment.tmp.EmploymentFuture.businessEmail, '') ) THEN SET firstMismatch = 'businessEmail';
			ELSEIF (COALESCE(businessMobCtryCode, '') <> COALESCE(Environment.tmp.EmploymentFuture.businessMobileCountryCode, '') ) THEN SET firstMismatch = 'businessMobileCountryCode';
			ELSEIF (COALESCE(businessMobPhoneNbr, '') <> COALESCE(Environment.tmp.EmploymentFuture.businessMobilePhoneNumber, '') ) THEN SET firstMismatch = 'businessMobilePhoneNumber';
			ELSEIF (COALESCE(businessLandCtryCode, '') <> COALESCE(Environment.tmp.EmploymentFuture.businessLandlineCountryCode, '') ) THEN SET firstMismatch = 'businessLandlineCountryCode';
			ELSEIF (COALESCE(businessLandPhoneNbr, '') <> COALESCE(Environment.tmp.EmploymentFuture.businessLandlinePhoneNumber, '') ) THEN SET firstMismatch = 'businessLandlinePhoneNumber';
			ELSEIF (COALESCE(buildingNumber, '') <> COALESCE(Environment.tmp.EmploymentFuture.buildingNumber, '') ) THEN SET firstMismatch = 'buildingNumber';
			ELSEIF (COALESCE(roomNumber, '') <> COALESCE(Environment.tmp.EmploymentFuture.roomNumber, '') ) THEN SET firstMismatch = 'roomNumber';
			ELSEIF (COALESCE(managerUserId, '') <> COALESCE(Environment.tmp.EmploymentFuture.managerUserId, '') ) THEN SET firstMismatch = 'managerUserId';
			ELSEIF (COALESCE(positionName, '') <> COALESCE(Environment.tmp.EmploymentFuture.positionName, '')) THEN SET firstMismatch = 'positionName';
			ELSEIF (COALESCE(orgUnitLevel1, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitLevel1, '') ) THEN SET firstMismatch = 'orgUnitLevel1';
			ELSEIF (COALESCE(orgUnitLevel2, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitLevel2, '') ) THEN SET firstMismatch = 'orgUnitLevel2';
			ELSEIF (COALESCE(orgUnitLevel3, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitLevel3, '') ) THEN SET firstMismatch = 'orgUnitLevel3';
			ELSEIF (COALESCE(orgUnitLevel4, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitLevel4, '') ) THEN SET firstMismatch = 'orgUnitLevel4';
			ELSEIF (COALESCE(orgUnitLevel5, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitLevel5, '') ) THEN SET firstMismatch = 'orgUnitLevel5';
			ELSEIF (COALESCE(orgUnitLevel6, '') <> COALESCE(Environment.tmp.EmploymentFuture.orgUnitLevel6, '') ) THEN SET firstMismatch = 'orgUnitLevel6';
			ELSEIF (COALESCE(contWrkAdmPositionId, '') <> COALESCE(Environment.tmp.EmploymentFuture.contingentWorkerAdminPositionId, '') ) THEN SET firstMismatch = 'contingentWorkerAdminPositionId';
			ELSEIF (COALESCE(parentPositionId, '') <> COALESCE(Environment.tmp.EmploymentFuture.parentPositionId, '') ) THEN SET firstMismatch = 'parentPositionId';
			END IF;
			 
			/* Check if insert new employee information or update current employee information or 
			   just update lastSyncDate for a current employee */
			   	-- We don't want to update fields derived by positionNav after termination (position can be reused and fields can change)
			IF (CARDINALITY(Environment.tmp.EmploymentFuture[]) = 0) THEN
				SET datbaseAction = 'Insert';
			ELSEIF  ( firstMismatch <> '') THEN 
				SET datbaseAction = 'Update';
				-- For debugging purposes:
				SET Environment.firstMismatch = firstMismatch; 					
			ELSE -- Update existing record with a lastSyncDate
				UPDATE Database.dbo.{TBL_EMPLOYMENT_FUTURE} AS T 
				SET lastSyncDate = syncTime
				WHERE T.personIdExternal = personIdExternal AND T.recordToDate IS NULL;
				
				COMMIT; -- Avoid long running locks
				
			END IF;
			
			-- Insert new Employment information
			IF (datbaseAction = 'Insert' OR datbaseAction = 'Update') THEN
				
				IF (datbaseAction = 'Update') THEN
					UPDATE Database.dbo.{TBL_EMPLOYMENT_FUTURE} AS T 
					SET recordToDate = syncTime
					WHERE T.personIdExternal = personIdExternal AND T.recordToDate IS NULL;
					
					COMMIT; -- Avoid long running locks
				END IF;
	
				INSERT INTO Database.dbo.{TBL_EMPLOYMENT_FUTURE}(userId,
													   		  personIdExternal,
													   		  initials,
													   		  firstName,
										  					  lastName,
													   		  companyCode,
													   		  locationId,
													   		  orgUnitId,
													   		  department,
													   		  division,
													   		  payGrade,
													   		  jobLevel,
													   		  businessUnit,
													   		  orgUnitLevel1,
													   		  orgUnitLevel2,
													   		  orgUnitLevel3,
													   		  orgUnitLevel4,
													   		  orgUnitLevel5,
													   		  orgUnitLevel6,
													   		  positionId,
													   		  positionName,
													   		  costCenterId,
													   		  employeeClass,
													   		  employeeSubClass,
													   		  employeeType,
													   		  employmentType,
													   		  employmentStatus,
													   		  standardHours,
													   		  workingDaysPerWeek,
													   		  fullTimeEquivalent,
													   		  seniorityDate,
													   		  originalStartDate,
													   		  recruitDate,
													   		  positionEntryDate,
													   		  lastDateWorked,
													   		  dateOfContractTermination,
													   		  event,
													   		  eventReason,
													   		  eventDate,
													   		  isManager,
													   		  businessEmail,
													   		  businessMobileCountryCode,
													   		  businessMobilePhoneNumber,
													   		  businessLandlineCountryCode,
													   		  businessLandlinePhoneNumber,
													   		  buildingNumber,
													   		  roomNumber,
													   		  managerUserId,
													   		  contingentWorkerAdminPositionId,
													   		  parentPositionId,								   		  
													   		  recordFromDate,
													   		  recordToDate,
													   		  lastSyncDate)
							VALUES (userId,				
									personIdExternal,
									initials,
									firstName,
									lastName,
									companyCode,
									locationId,
									orgUnitId,
									department,
									division,
									payGrade,
									jobLevel,
									businessUnit,
									orgUnitLevel1,
									orgUnitLevel2,
									orgUnitLevel3,
									orgUnitLevel4,
									orgUnitLevel5,
									orgUnitLevel6,
									positionId,
									positionName,
									costCenterId,
									employeeClass,
									employeeSubClass,
									employeeType,
									employmentType,
									employmentStatus,
									standardHours,
									workingDaysPerWeek,
									fullTimeEquivalent,
									seniorityDate,
									originalStartDate,
						   		    recruitDate,
						   		    positionEntryDate,
									lastDateWorked,
									dateOfContractTerm,
									event,
									eventReason,
									eventDate,
									isManager,
									businessEmail,
									businessMobCtryCode,
									businessMobPhoneNbr,
									businessLandCtryCode,
									businessLandPhoneNbr,
									buildingNumber,
									roomNumber,
									managerUserId,
									contWrkAdmPositionId,	
									parentPositionId,							
									syncTime,				--recordFromDate
									NULL,					--recordToDate
									syncTime);				--lastSyncDate	

				COMMIT; -- Avoid long running locks
			END IF; 				          	   		         	        
		 ELSEIF (vIgnore = TRUE) THEN -- Update lastSyncDate even if any other update should be ignored
			
			 --Get current employee in table Employment
			 CALL GetCurrentEmpInEmploymentFuture(personIdExternal);
			
			 IF (CARDINALITY(Environment.tmp.EmploymentFuture[]) > 0) THEN
				UPDATE Database.dbo.{TBL_EMPLOYMENT_FUTURE} AS T 
				SET lastSyncDate = syncTime
				WHERE T.personIdExternal = personIdExternal AND T.recordToDate IS NULL;
			 END IF;
		 END IF;
	END;

	CREATE PROCEDURE GetCurrentEmpInEmploymentFuture(IN personIdExternal CHAR) BEGIN			
		SET Environment.tmp.EmploymentFuture[] = 
		SELECT  T.userId,
				T.personIdExternal,
				T.initials,
				T.firstName,
				T.lastName,
				T.companyCode,
				T.locationId,
				T.orgUnitId,
				T.department,
				T.division,
				T.payGrade,
				T.jobLevel,
				T.businessUnit,
				T.orgUnitLevel1,
      			T.orgUnitLevel2,
      			T.orgUnitLevel3,
      			T.orgUnitLevel4,
      			T.orgUnitLevel5,
      			T.orgUnitLevel6,
				T.positionId,
				T.positionName,
				T.costCenterId,
				T.employeeClass,
				T.employeeSubClass,
				T.employeeType,
				T.employmentType,
				T.employmentStatus,
				T.isManager,
				T.seniorityDate,
				T.originalStartDate,
				T.recruitDate,
				T.positionEntryDate,
				T.standardHours,
				T.workingDaysPerWeek,
				T.fullTimeEquivalent,
				T.event,
				T.eventReason,
				T.eventDate,	
				T.lastDateWorked,
				T.dateOfContractTermination,			
				T.businessEmail,
				T.businessMobileCountryCode,
				T.businessMobilePhoneNumber,
				T.businessLandlineCountryCode,
				T.businessLandlinePhoneNumber,
				T.buildingNumber,
				T.roomNumber,
				T.managerUserId,
				T.contingentWorkerAdminPositionId,
      			T.parentPositionId
		FROM 	Database.dbo.{TBL_EMPLOYMENT_FUTURE} AS T 
		WHERE 	T.personIdExternal = personIdExternal AND 
				T.recordTodate IS NULL;					
	END;

	CREATE PROCEDURE GetCurrentEmpInEmployment(IN personIdExternal CHAR) BEGIN			
		SET Environment.tmp.Employment[] = 
		SELECT  T.userId,
				T.personIdExternal,
				T.initials,
				T.employmentStatus
		FROM 	Database.dbo.{TBL_EMPLOYMENT} AS T 
		WHERE 	T.personIdExternal = personIdExternal AND 
				T.recordTodate IS NULL;					
	END;	
	
END MODULE;								  	  				


