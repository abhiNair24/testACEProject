BROKER SCHEMA INT0080.PROCESS.ORGUNIT

-- Working tables
DECLARE TBL_ORG				CONSTANT CHARACTER 'OrgUnit';

CREATE COMPUTE MODULE ProcessOrgUnit
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.d.results.Item;
		
		IF (CARDINALITY(InputRoot.JSON.Data.d.results.Item[]) > 0) THEN
			
			IF (inRef.__metadata.type = 'SFOData.FODepartment') THEN
				CALL MapDepartmentToOrg(inRef);
				SET OutputRoot.XMLNSC.Info = 'FODepartment to Org sucessfully processed.';	
			ELSEIF (inRef.__metadata.type = 'SFOData.FODivision') THEN
				CALL MapDivisionToOrg(inRef);
				SET OutputRoot.XMLNSC.Info = 'FODivision to Org sucessfully processed.';	
			ELSEIF (inRef.__metadata.type = 'SFOData.FOBusinessUnit') THEN
				CALL MapBusinessUnitToOrg(inRef);
				SET OutputRoot.XMLNSC.Info = 'FOBusinessUnit to Org sucessfully processed.';	
			ELSE
				THROW USER EXCEPTION MESSAGE 2951 VALUES('Only JSON message metadata type ''SFOData.FODepartment'', ''SFOData.FODivision'' or ''SFOData.FOBusinessUnit'' allowed!');
			END IF;						
		ELSE
			SET OutputRoot.XMLNSC.Info = 'No data found in input message.';			
			SET OutputLocalEnvironment.MetaData.Status = 'Filtered';
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE MapDepartmentToOrg(IN inRef REFERENCE) BEGIN
		
		WHILE LASTMOVE(inRef) DO	
			DECLARE orgUnitId 			CHAR;
			DECLARE name			 	CHAR;
			DECLARE orgUnitType 		CHAR;		
			DECLARE orgUnitParent	 	CHAR;
			DECLARE costCenter			CHAR;
			DECLARE headOfUnitUserId	CHAR;
			DECLARE status	 			CHAR;

			-- Incase of error then easier to identify which row that was in error
			SET Environment.OrgUnitID = inRef.externalCode;
			
			-- Map department to OrgUnit
			SET orgUnitId 			= TRIM(LEFT(inRef.externalCode, 32));
			SET name 				= TRIM(LEFT(inRef.name, 90));
			SET orgUnitType 		= 'Department';			
			SET costCenter			= TRIM(LEFT(inRef.costCenter, 90));
			SET headOfUnitUserId	= TRIM(LEFT(inRef.headOfUnit, 100));		
			SET status 				= TRIM(LEFT(inRef.status, 2));
			
			IF (inRef.parent IS NULL) THEN
				SET orgUnitParent = TRIM(LEFT(COALESCE(inRef.cust_toDivision.results.Item.externalCode, NULL), 32));
			ELSE
				SET orgUnitParent = TRIM(LEFT(inRef.parent, 32));
			END IF;			

			-- Process table OrgUnit	
			CALL ProcessOrgUnit(orgUnitId, 
							    name, 
							    orgUnitType,
							    orgUnitParent,
							    costCenter,
							    headOfUnitUserId,
							    status);
												
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;	
		END WHILE;	
	END;

	CREATE PROCEDURE MapDivisionToOrg(IN inRef REFERENCE) BEGIN
		
		WHILE LASTMOVE(inRef) DO	
			DECLARE orgUnitId 			CHAR;
			DECLARE name			 	CHAR;
			DECLARE orgUnitType 		CHAR;		
			DECLARE orgUnitParent	 	CHAR;
			DECLARE costCenter			CHAR;
			DECLARE headOfUnitUserId	CHAR;
			DECLARE status	 			CHAR;

			-- Incase of error then easier to identify which row that was in error
			SET Environment.OrgUnitID = inRef.externalCode;
			
			-- Map division to OrgUnit
			SET orgUnitId 			= TRIM(LEFT(inRef.externalCode, 32));
			SET name 				= TRIM(LEFT(inRef.name, 90));
			SET orgUnitType 		= 'Division';			
			SET costCenter			= TRIM(LEFT(inRef.cust_costCenter, 90));
			SET headOfUnitUserId	= TRIM(LEFT(inRef.headOfUnit, 100));		
			SET status 				= TRIM(LEFT(inRef.status, 2));
			SET orgUnitParent 		= TRIM(LEFT(COALESCE(inRef.cust_toBusinessUnit.results.Item.externalCode, NULL), 32));		

			-- Process table OrgUnit	
			CALL ProcessOrgUnit(orgUnitId, 
							    name, 
							    orgUnitType,
							    orgUnitParent,
							    costCenter,
							    headOfUnitUserId,
							    status);
												
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;	
		END WHILE;
	END;

	CREATE PROCEDURE MapBusinessUnitToOrg(IN inRef REFERENCE) BEGIN
		
		WHILE LASTMOVE(inRef) DO	
			DECLARE orgUnitId 			CHAR;
			DECLARE name			 	CHAR;
			DECLARE orgUnitType 		CHAR;		
			DECLARE orgUnitParent	 	CHAR;
			DECLARE costCenter			CHAR;
			DECLARE headOfUnitUserId	CHAR;
			DECLARE status	 			CHAR;

			-- Incase of error then easier to identify which row that was in error
			SET Environment.OrgUnitID = inRef.externalCode;
			
			-- Map division to OrgUnit
			SET orgUnitId 			= TRIM(LEFT(inRef.externalCode, 32));
			SET name 				= TRIM(LEFT(inRef.name, 90));
			SET orgUnitType 		= 'BusinessUnit';			
			SET costCenter			= TRIM(LEFT(inRef.cust_costCenter, 90));
			SET headOfUnitUserId	= TRIM(LEFT(inRef.headOfUnit, 100));		
			SET status 				= TRIM(LEFT(inRef.status, 2));
			SET orgUnitParent 		= TRIM(LEFT(COALESCE(inRef.cust_toBusinessUnit.externalCode, NULL), 32));		

			-- Process table OrgUnit	
			CALL ProcessOrgUnit(orgUnitId, 
							    name, 
							    orgUnitType,
							    orgUnitParent,
							    costCenter,
							    headOfUnitUserId,
							    status);
												
			MOVE inRef NEXTSIBLING REPEAT TYPE NAME;	
		END WHILE;
	END;
								   
	CREATE PROCEDURE ProcessOrgUnit(IN orgUnitId CHAR, 
								    IN name CHAR, 
								    IN orgUnitType CHAR,
								    IN orgUnitParent CHAR,
							   	    IN costCenter CHAR,
							   	    IN headOfUnitUserId CHAR,
								    IN status CHAR) BEGIN				
		
		DECLARE datbaseAction	CHAR;		
		
	
		-- Get current org unit in table OrgUnit
		CALL GetCurrentOrgUnitInOrgUnit(orgUnitId);
		
		/* Check if insert new org unit information or update current org unit information or 
		   just update lastSyncDate for a current org unit */
		IF (CARDINALITY(Environment.tmp.OrgUnit[]) = 0) THEN
			SET datbaseAction = 'Insert';
		ELSEIF (COALESCE(name, '') <> COALESCE(Environment.tmp.OrgUnit.name, '') OR
				COALESCE(orgUnitType, '') <> COALESCE(Environment.tmp.OrgUnit.orgUnitType, '') OR
				COALESCE(orgUnitParent, '') <> COALESCE(Environment.tmp.OrgUnit.orgUnitParent, '') OR				
				COALESCE(costCenter, '') <> COALESCE(Environment.tmp.OrgUnit.costCenter, '') OR
				COALESCE(headOfUnitUserId, '') <> COALESCE(Environment.tmp.OrgUnit.headOfUnitUserId, '') OR
				COALESCE(status, '') <> COALESCE(Environment.tmp.OrgUnit.status, '')) THEN
			SET datbaseAction = 'Update';
		END IF;			
				
		IF (datbaseAction = 'Insert') THEN
			CALL InsertOrgUnit(orgUnitId, 
						   	   name, 
						   	   orgUnitType,
						   	   orgUnitParent,
							   costCenter,
							   headOfUnitUserId,
						   	  status);
		ELSEIF (datbaseAction = 'Update') THEN
			CALL UpdateOrgUnit(orgUnitId, 
						   	   name, 
						   	   orgUnitType,
						   	   orgUnitParent,
							   costCenter,
							   headOfUnitUserId,
						   	   status);
		ELSE -- Update existing record with a lastSyncDate
			UPDATE Database.dbo.{TBL_ORG} AS T 
			SET lastSyncDate = CURRENT_TIMESTAMP
			WHERE T.orgUnitId = orgUnitId;
		END IF;
	END;

	CREATE PROCEDURE GetCurrentOrgUnitInOrgUnit(IN orgUnitId CHAR) BEGIN			
		SET Environment.tmp.OrgUnit[] = 
		SELECT  T.orgUnitId,
				T.name,
				T.orgUnitType,
				T.orgUnitParent,
				T.costCenter,
				T.headOfUnitUserId,
				T.status
		FROM 	Database.dbo.{TBL_ORG} AS T 
		WHERE 	T.orgUnitId = orgUnitId;					
	END;

	CREATE PROCEDURE InsertOrgUnit(IN orgUnitId CHAR,
								   IN name CHAR,
								   IN orgUnitType CHAR,
								   IN orgUnitParent CHAR,
							   	   IN costCenter CHAR,
							   	   IN headOfUnitUserId CHAR,								  
								   IN status CHAR) BEGIN

		INSERT INTO Database.dbo.{TBL_ORG}(orgUnitId,
										   name,
										   orgUnitType,
										   orgUnitParent,
										   costCenter,
										   headOfUnitUserId,
										   status,											   
										   recordLastUpdated,
										   lastSyncDate)
		VALUES (orgUnitId,
				name,
				orgUnitType,
				orgUnitParent,
				costCenter,
				headOfUnitUserId,
				status,														
				CURRENT_TIMESTAMP,		--recordLastUpdated
				CURRENT_TIMESTAMP);		--lastSyncDate
	END;

	CREATE PROCEDURE UpdateOrgUnit(IN orgUnitId CHAR,
								   IN name CHAR,
								   IN orgUnitType CHAR,
								   IN orgUnitParent CHAR,
							   	   IN costCenter CHAR,
							   	   IN headOfUnitUserId CHAR,								  
								   IN status CHAR) BEGIN

		UPDATE Database.dbo.{TBL_ORG} AS T
		SET name 				= name, 
			orgUnitType			= orgUnitType,
			orgUnitParent		= orgUnitParent, 
			costCenter 			= costCenter,
			headOfUnitUserId 	= headOfUnitUserId,			
			status				= status,
			recordLastUpdated 	= CURRENT_TIMESTAMP,
			lastSyncDate	 	= CURRENT_TIMESTAMP
		WHERE T.orgUnitId = orgUnitId;
	END;

END MODULE;
